/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.cassandra.io.sstable;

import java.util.Set;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import org.apache.cassandra.SchemaLoader;
import org.apache.cassandra.config.Config;
import org.apache.cassandra.config.Schema;
import org.apache.cassandra.config.YamlConfigurationLoader;
import org.apache.cassandra.cql3.QueryProcessor;
import org.apache.cassandra.cql3.UntypedResultSet;
import org.apache.cassandra.db.ColumnFamilyStore;
import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
import org.apache.cassandra.db.compaction.CompactionController;
import org.apache.cassandra.db.compaction.CompactionIterator;
import org.apache.cassandra.db.compaction.CompactionTask;
import org.apache.cassandra.db.compaction.OperationType;
import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
import org.apache.cassandra.db.rows.UnfilteredRowIterator;
import org.apache.cassandra.exceptions.ConfigurationException;
import org.apache.cassandra.io.sstable.format.SSTableReader;
import org.apache.cassandra.schema.KeyspaceParams;
import org.apache.cassandra.utils.FBUtilities;
import org.apache.cassandra.utils.UUIDGen;

public class EarlyOpenTest
{
    public static class ConfigLoader extends YamlConfigurationLoader
    {
        public Config loadConfig() throws ConfigurationException
        {
            Config config = super.loadConfig();
            config.sstable_preemptive_open_interval_in_mb = 0;
            return config;
        }
    }

    static
    {
        System.setProperty("cassandra.config.loader", ConfigLoader.class.getName());
    }

    private static final String keyspace = "ks_" + System.currentTimeMillis();

    @BeforeClass
    public static void setupClass() throws Exception
    {
        SchemaLoader.prepareServer();
        SchemaLoader.createKeyspace(keyspace, KeyspaceParams.simple(1));
    }

    /**
     * Demonstrates CASSANDRA-11468
     *
     * When attempting reads from compressed sstables which have been early opened, a CorruptSSTableException is thrown
     */
    @Test
    public void earlyOpen() throws Exception
    {
        // create table
        String table = "early_open_test";
        String ddl = String.format("CREATE TABLE %s.%s (k INT PRIMARY KEY, v1 INT, v2 INT) " +
                                   "WITH min_index_interval=%s AND max_index_interval=%s;",
                                   keyspace, table, 2, 2);
        QueryProcessor.executeInternal(ddl);
        ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(Schema.instance.getId(keyspace, table));

        // insert data / flush to disk
        String query = String.format("INSERT INTO %s.%s (k, v1, v2) VALUES (?, ?, ?)", keyspace, table);
        int expectedRows = 0;

        for (int i=0; i<4; i++)
        {
            QueryProcessor.executeInternal(query, expectedRows, 0, expectedRows%2);
            expectedRows++;
        }
        cfs.forceBlockingFlush();
        for (int i=0; i<4; i++)
        {
            QueryProcessor.executeInternal(query, expectedRows, 0, expectedRows%2);
            expectedRows++;
        }
        cfs.forceBlockingFlush();
        int initialSSTables = cfs.getLiveSSTables().size();

        Assert.assertEquals(2, cfs.getLiveSSTables().size());

        // confirm all the rows can be read
        for (int i=0; i<expectedRows; i++)
        {
            UntypedResultSet result = QueryProcessor.executeInternal(String.format("SELECT * from %s.%s WHERE k=%s", keyspace, table, i));
            Assert.assertEquals(1, result.size());
        }

        // compact
        Set<SSTableReader> sstables = cfs.getLiveSSTables();
        int nowInSec = FBUtilities.nowInSeconds();

        boolean wasEarlyOpened = false;

        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables))
        {
            LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);
            CompactionTask task = (CompactionTask) cfs.getCompactionStrategyManager().getCompactionTask(txn, nowInSec, Long.MAX_VALUE);

            int numRowsCompacted = 0;


            try (CompactionAwareWriter writer = task.getCompactionAwareWriter(cfs, cfs.getDirectories(), txn, txn.originals());
                 CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));
                 CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))
            {
                while (ci.hasNext())
                {
                    if (!wasEarlyOpened && writer.getRewriter().currentWriter() != null)
                    {
                        // double check there hasn't been any early opening
                        Assert.assertEquals(initialSSTables, cfs.getLiveSSTables().size());

                        // although the name is scary, this does the same thing as the vanilla openEarly method,
                        // except it syncs the data and index files to disk, so it's guaranteed to be opened early
                        writer.getRewriter().currentWriter().flush();
                    }

                    UnfilteredRowIterator partition = ci.next();
                    writer.append(partition);
                    numRowsCompacted++;
                    int numSSTables = cfs.getLiveSSTables().size();
                    wasEarlyOpened |= numSSTables > initialSSTables;

                    // check that all the rows are readable
                    for (int i=0; i<expectedRows; i++)
                    {
                        String msg = String.format("Partition %s not read after appending %s rows. Early opened=%s.", i, numRowsCompacted, wasEarlyOpened);
                        UntypedResultSet result = QueryProcessor.executeInternal(String.format("SELECT * from %s.%s WHERE k=%s", keyspace, table, i));
                        Assert.assertEquals(msg, 1, result.size());
                    }
                }
                writer.finish();

                Assert.assertEquals(expectedRows, numRowsCompacted);
            }
            txn.close();
        }
        LifecycleTransaction.waitForDeletions();

        Assert.assertTrue(wasEarlyOpened);
        Assert.assertEquals(1, cfs.getLiveSSTables().size());
    }
}
