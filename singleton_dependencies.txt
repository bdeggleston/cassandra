# *m = num methods, *p = num proxied calls

# loadSchemas has most of the Schema, SystemKeyspace & DefsTables references, SystemKeyspace is also referenced in isReplacing
# move loadSchemas to Schema or SystemKeyspace
DatabaseDescriptor [Schema(?, 3m), SystemKeyspace(?, 2m), DefsTables(?, 1m), KeyspaceManager]  #seems to be logical initialization point
    * move loadSchemas to SystemKeyspace
    * pass SystemKeyspace into isReplacing

QueryProcessor []  # maintains prepared statements, but has no dependencies

SinkManager []
StorageServiceTasks []
StreamManager [DatabaseDescriptor]

Schema [SystemKeyspace(?, 1m), MigrationManager(?, 1m)]
    * pass SystemKeyspace into updateVersion method
    * pass MigrationManager into updateVersionAndAnnounce (called by DefsTables, StorageService)
    * move static initialization stuff into static factory method


SystemKeyspace [ClusterState, Schema(weak, 1m finishStartup), QueryProcessor(strong), DatabaseDescriptor(strong)]
    * replace StorageService.getPartitioner gets with DatabaseDescriptor.getPartitioner
    * pass schema instance into finishStartup

DefsTables [SystemKeyspace, Schema, MigrationManager(med), CompactionManager(weak, 2), CommitLog(weak, 1)]

StageManager [DatabaseDescriptor, MessagingService(weak, 1m, parameterize)]

MessagingService [StorageServiceTasks, StageManager(stronger, 2m), StorageProxy(weak, 1m), DatabaseDescriptor, SinkManager, Tracing]
    * work out how to decouple the MessagingService and StageManager constructors
        * could push incrementDroppedMessages from MessagingService to DatabaseDescriptor, but that's kinda messy
        * could special case tracingexecutor to live in an atomic reference outside the enum map and expose a setter
        * could push getStage up to DatabaseDescriptor, also ugly
        * could use a wrapper class for the timeoutReporter, which references a volatile member

Gossiper [MessagingService, DatabaseDescriptor, FailureDetector(?), StorageService(?), StageManager]
    * move failure detector registration out of constructor and into static factory
    * DI other FailureDetector dependent methods (3)
    * move valueFactory from StorageService to ClusterState to remove dependency

LoadBroadcaster [Gossiper]

FailureDetector [Gossiper(strong), DatabaseDescriptor]

MigrationManager [Schema(strong), Gossiper, StorageServiceTasks, StageManager, SystemKeyspace, DefsTables, MessagingService, StorageService]
    * DI StorageService instance to passiveAnnounce method


HintedHandOffManager [DatabaseDescriptor, Schema, StorageServiceTasks, 
                      CompactionManager(weak, 1), Gossiper, FailureDetector, SystemKeyspace, MessagingService, ClusterState]
    * DI CompactionManager into compact method

CommitLog [DatabaseDescriptor, StorageService(weak, 1m)]

ClusterState [DatabaseDescriptor, Schema, KeyspaceManager]
    * move valueManager from StorageService
    * move bootstrap state from StorageService

Updated --> CompactionManager [Schema, ActiveRepairService, SystemKeyspace]
ActiveRepairService [Gossiper, FailureDetector, MessagingService, CompactionManager]

* Create ClusterState class
    * kind of weird
        * but cluster state needs to be read independently of StorageService
        * ClusterState holds state, StorageService mutates it
    * handle TokenMetadata
    * handle getPartitioner
    * handle getEndpoints, getLocalRanges
    * need unsafe set for partitioner and TokenMetadata for testing
    * would be nice to encapsulate TokenMetadata mutations

Updated --> Auth [QueryProcessor, DatabaseDescriptor, MigrationManager, ClusterState, Schema]

BatchlogManager [QueryProcessor, DatabaseDescriptor, ClusterState, KeyspaceManager, SystemKeyspace, StorageProxy, FailureDetector, 
                 MessagingService, CompactionManager]

StorageService [SystemKeyspace, Gossiper(strong), StreamManager(weak, move to create method), MessagingService(strong),
                StageManager, DatabaseDescriptor, MessagingService, MigrationManager(3-4m), StorageServiceTasks(2, init/drain),
                StorageProxy(3m), CommitLog(2, init/drain), Schema, LoadBroadcaster(3m), HintedHandOffManager(3m, 1p),
                BatchlogManager(2m), PendingRangeCalculatorService, Auth(weak, 2m, init/start),
                FailureDetector(5m), ActiveRepairService(very strong), ColumnFamilyStoreManager(create), KeyspaceManager]
    * DI StorageProxy into methods
    * resolve dependency on KeyspaceManager
    * split out TokenMetadata management
    * split out bootstrap state
    * split out getValidColumnFamilies, forceKeyspaceFlush

StorageProxy [StageManager, Schema(3m), DatabaseDescriptor, TriggerExecutor(2m, 1p), StorageService(strong), MessagingService,
              FailureDetector(2m), SinkManager(2m), Gossiper(4m)] # Has a lot methods that just proxy calls to DatabaseDescriptor
    * maybe remove dependency on StorageService(getPartitioner, TokenMetadata, getNaturalEndpoints, getLiveNaturalEndpoints)
    * move isBootstrapMode to ClusterState to remove dependency on StorageService

ColumnFamilyStoreManager [Schema, ClusterState, SystemKeyspace, CompactionManager, CacheService]
ColumnFamilyStore [ClusterState, SystemKeyspace, CompactionManager, CacheService]

*Updated --> KeyspaceManager [Schema, StorageService, CommitLog, ColumnFamilyStoreManager]
    * remove StorageService dependency from Keyspace

RepairMessageVerbHandler [CompactionManager, Schema, KeyspaceManager, ActiveRepairService, MessagingService, StorageService]
    # instantiated by StorageService

Keyspace [Schema, ClusterState, DatabaseDescriptor(weak), 
                       CommitLog(weak, single method), ColumnFamilyStoreManager, KSMetaData]
    * move static initialization methods into static factory
    * remove StorageService dependency (TokenMetadata)

KSMetaData [ClusterState, DatabaseDescriptor, SystemKeyspace, QueryProcessor]
CFMetaData [QueryProcessor, Schema, SystemKeyspace, ColumnFamilyStoreManager, KeyspaceManager]


Updated --> CacheService [DatabaseDescriptor, StageManager, Schema]
Updated --> ColumnFamilyStoreManager [Schema, StorageService, SystemKeyspace, CompactionManager, CacheService]
Updated --> ColumnFamilyStore [CacheService, SystemKeyspace, CompactionManager(strong), StorageService(weaker, 2)]

StatusLogger [DatabaseDescriptor, ColumnFamilyStoreManager]

TriggerExecutor [QueryProcessor]


Updated --> PendingRangeCalculatorService [Schema, ClusterState]
Updated --> Tracing [StageManager, StorageProxy]

